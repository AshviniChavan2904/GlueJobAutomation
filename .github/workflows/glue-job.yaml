name: Upload AWS Glue Job

on:
  push:
    branches:
      - main  
    paths:
      - Script1/** 
      - Script2/**  
      - Script3/** 

jobs:
  upload:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2        

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
          aws-region: us-east-1 

      - name: Check for modified scripts and update Glue jobs
        run: |
          # Define a mapping of script paths to Glue job names
          declare -A GLUE_JOBS=(
            ["Script1/script1.py"]="test-job1"
            ["Script2/script2.py"]="test-job2"
            ["Script3/script3.py"]="test-job"
          )

          # Get the list of modified files in the push
          MODIFIED_FILES=$(git diff --name-only HEAD^ HEAD)

          # Log modified files for debugging
          echo "Modified files: $MODIFIED_FILES"          

          # Iterate through modified files and update respective Glue jobs
          for file in $MODIFIED_FILES; do
            if [[ ${GLUE_JOBS[$file]} ]]; then
              echo "Processing $file for Glue job: ${GLUE_JOBS[$file]}"

              # Get the base filename 
              base_filename=$(basename $file)

              # Upload the modified script to the corresponding S3 location
              aws s3 cp $file s3://testbucket94927/Scripts/$base_filename
              
              # Get the current Glue job configuration
              current_job=$(aws glue get-job --job-name ${GLUE_JOBS[$file]} --query 'Job' --output json)

              # Update the ScriptLocation in the current job configuration
              updated_job=$(echo $current_job | jq --arg scriptLocation "s3://testbucket94927/Scripts/$base_filename" '
                {
                  Command: {
                    Name: .Command.Name,  # Retain the existing command name
                    ScriptLocation: $scriptLocation
                  },
                  Role: .Role,
                  DefaultArguments: .DefaultArguments,
                  ExecutionProperty: .ExecutionProperty,
                  MaxRetries: .MaxRetries,
                  Timeout: .Timeout,
                  MaxCapacity: .MaxCapacity,
                  WorkerType: .WorkerType,
                  NumberOfWorkers: .NumberOfWorkers
                }
              ')

              # Update the Glue job with the modified configuration
              aws glue update-job --job-name ${GLUE_JOBS[$file]} --job-update "$updated_job" --region us-east-1

              # Optionally start the Glue job after updating
              # aws glue start-job-run --job-name ${GLUE_JOBS[$file]} --region us-east-1
            else
              echo "$file does not have an associated Glue job"
            fi
          done